#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        bracket {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <19 20>;
            layers = <0>;
        };

        bracket_r {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <21 20>;
            layers = <0>;
        };

        lb {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <31 32>;
            layers = <0>;
        };

        rb {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <32 33>;
            layers = <0>;
        };

        lf {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <31 32>;
            layers = <0>;
        };

        rba {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <32 33>;
            layers = <0>;
        };

        plus {
            bindings = <&kp DELETE>;
            key-positions = <16 17>;
            layers = <0>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <19 18>;
            layers = <0>;
        };

        caret {
            bindings = <&kp CARET>;
            key-positions = <7 8>;
            layers = <0>;
        };

        underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <30 31>;
            layers = <0>;
        };

        multiplu {
            bindings = <&kp KP_ASTERISK>;
            key-positions = <9 10>;
            layers = <0>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <21 22>;
            layers = <0>;
        };

        and {
            bindings = <&kp AMPERSAND>;
            key-positions = <9 8>;
            layers = <0>;
        };

        at {
            bindings = <&kp AT>;
            key-positions = <2 3>;
            layers = <0>;
        };

        tick {
            bindings = <&kp GRAVE>;
            key-positions = <0 1>;
            layers = <0>;
        };

        hash {
            bindings = <&kp HASH>;
            key-positions = <3 4>;
            layers = <0>;
        };

        dollar {
            bindings = <&kp TILDE>;
            key-positions = <4 5>;
            layers = <0>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <28 29>;
            layers = <0>;
        };

        percent {
            bindings = <&kp PERCENT>;
            key-positions = <6 7>;
            layers = <0>;
        };

        retern {
            bindings = <&kp RETURN>;
            key-positions = <15 16>;
            layers = <0>;
        };

        exam {
            bindings = <&kp EXCL>;
            key-positions = <1 2>;
            layers = <0>;
        };

        backspace {
            bindings = <&mt DELETE BACKSPACE>;
            key-positions = <14 15>;
            layers = <0>;
        };

        lclk {
            bindings = <&kp ENTER>;
            key-positions = <15 16>;
            layers = <1>;
        };

        switch {
            bindings = <&mo 8>;
            key-positions = <39 40>;
        };

        reverse {
            bindings = <&sl 10>;
            key-positions = <37 38>;
        };
    };

    behaviors {
        hml: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "homewrow_mods_left";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <6 7 9 8 10 11 23 22 35 34 33 21 20 19 18 30 31 32 41 40 39>;
            tapping-term-ms = <300>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <250>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <250>;
            hold-trigger-on-release;
        };

        tap_preferred: tap_preferred {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_PREFERRED";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <40>;
            flavor = "tap-preferred";
        };
    };

    macros {
        ceo: ceo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp M &kp ENTER &kp DOWN &kp DOWN &kp DOWN &kp DOWN &kp ENTER &kp DOWN &kp ENTER>;
            label = "CEO";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // --------------------------------------------------------------------------------------------------------------------------------------------------------------------
            // |   ESC   |    Q    |    W    |    E    |    R    |    T    |                                          |    Y    |    U    |    I    |    O    |    P    |    \    |
            // |   TAB   |    A    |    S    |    D    |    F    |    G    |                                          |    H    |    J    |    K    |    L    |    ;    |    '    |
            // |  SHIFT  |    Z    |    X    |    C    |    V    |    B    | CTRL+A  | CTRL+C  |  |  CTRL+V |  CTRL+X |    N    |    M    |    ,    |    .    |    /    |  R CTRL |
            //                               |   GUI   |   DEL   | RETURN  |  SPACE  | ESCAPE  |  |  RETURN |  SPACE  |   TAB   |   BSPC  |  R ALT  |

            bindings = <
&kp TAB           &kp Q              &kp W         &kp F            &kp P            &kp B        &kp LS(LPAR)    &kp LS(RPAR)  &kp J            &kp L             &kp U            &kp Y                 &kp SEMI           &kp BSPC
&mt LCTRL ESCAPE  &hml LEFT_SHIFT A  &hml RCTRL R  &hml LEFT_ALT S  &hml LEFT_WIN T  &kp G        &kp LBKT        &kp RBKT      &kp M            &hmr RIGHT_GUI N  &hmr LEFT_ALT E  &hmr RIGHT_CONTROL I  &hmr LEFT_SHIFT O  &kp SQT
&kp LEFT_SHIFT    &kp Z              &kp X         &kp C            &kp D            &kp V        &kp LS(LBRC)    &kp LS(RBRC)  &kp K            &kp H             &kp COMMA        &kp DOT               &kp FSLH           &kp RSHFT
                                                                    &kp LGUI         &lt 2 SPACE  &lt 1 TAB       &kp ENTER     &lt 3 BACKSPACE  &kp RALT
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN &inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        num {
            bindings = <
&trans  &kp KP_MULTIPLY  &kp N7  &kp N8  &kp N9  &kp PLUS   &trans         &trans  &trans    &trans    &trans        &trans     &trans  &trans
&trans  &kp KP_DIVIDE    &kp N4  &kp N5  &kp N6  &kp MINUS  &trans         &trans  &kp LEFT  &kp DOWN  &kp UP_ARROW  &kp RIGHT  &trans  &trans
&trans  &kp DOT          &kp N1  &kp N2  &kp N3  &kp N0     &bootloader    &trans  &trans    &trans    &trans        &trans     &trans  &trans
                                         &trans  &trans     &trans         &trans  &mo 5     &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN &inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        symbol {
            bindings = <
&trans  &trans  &kp LS(AMPS)  &kp LS(STAR)   &kp LS(LPAR)   &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp LS(DLLR)  &kp LS(PRCNT)  &kp LS(CARET)  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp LS(EXCL)  &kp LS(AT)     &kp LS(POUND)  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
                                             &trans         &trans  &trans    &trans  &trans  &trans
            >;
        };

        fuction {
            bindings = <
&trans  &trans  &kp F7  &kp F8  &kp F9  &trans  &trans    &trans       &trans    &trans        &trans    &trans     &trans  &trans
&trans  &trans  &kp F4  &kp F5  &kp F6  &trans  &trans    &trans       &kp LEFT  &kp UP_ARROW  &kp DOWN  &kp RIGHT  &trans  &trans
&trans  &trans  &kp F1  &kp F2  &kp F3  &trans  &trans    &bootloader  &trans    &trans        &trans    &trans     &trans  &trans
                                &trans  &trans  &trans    &trans       &trans    &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN &inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        game {
            bindings = <
&kp TAB    &ceo    &kp Q  &kp W  &kp E   &kp R      &kp T    &kp Y   &kp U   &kp I      &kp O    &kp P     &trans    &trans
&kp ESC    &kp N2  &kp A  &kp S  &kp D   &kp F      &kp G    &kp H   &kp J   &kp K      &kp L    &kp SEMI  &kp APOS  &trans
&kp LSHFT  &kp N3  &kp Z  &kp X  &kp C   &kp V      &kp B    &kp N   &kp M   &kp COMMA  &kp DOT  &kp FSLH  &trans    &trans
                                 &trans  &kp SPACE  &mo 1    &trans  &trans  &trans
            >;
        };

        layer_5 {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans        &trans  &to 4   &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans        &trans  &to 0   &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
                                          &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
